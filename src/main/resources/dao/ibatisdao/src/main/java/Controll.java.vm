##DAO实现代码生成模版
##使用到的变量有：
##$!{gb.packageName}包名，如：net.letuu.order
##$!{gb.userName}机器登录用户名，如：microboss
##$!{gb.nowDate}当前日期，如：2013-05-02
##$!{tbb.className}类名，如：UserInfo
##$!{tbb.objectName}对象名，如：userInfo
##宏定义,用于单一对象的删除与查找的参数
#macro(primaryKey $tbb)
    #foreach($pkcol in $tbb.pkcol) $!{pkcol.propertyType} $!{pkcol.propertyName}  #if(!$foreach.last), #end #end
    #if($conf.isSplitTable()), String tableId#end
#end
##宏定义,用于多对象的删除与查找的参数
#macro( primaryKeys $tbb )
    #foreach($pkcol in $tbb.pkcol)#if($foreach.last)List<$!{pkcol.propertyType}> $!{pkcol.propertyName}List#else$!{pkcol.propertyType} $!{pkcol.propertyName},#end#end
    #if($conf.isSplitTable()), String tableId#end
#end
##主键值
#macro( primaryValue $tbb)
    #foreach($pkcol in $tbb.pkcol)$!{pkcol.propertyName}  #if(!$foreach.last), #end #end
    #if($conf.isSplitTable()), tableId #end
#end
##主键值
#macro( primaryValues $tbb )
    #foreach($pkcol in $tbb.pkcol)#if($foreach.last)$!{pkcol.propertyName}List#else $!{pkcol.propertyName},#end#end
    #if($conf.isSplitTable()), tableId #end
#end
#macro( tableType $isSplitTable )
    #if($isSplitTable), String tableId#end
#end
#macro( tableValue $isSplitTable )
    #if($isSplitTable)
        #if($isSplitTable), tableId#end
    #end
#end
#set($conf=$!{tbb.conf})
#set($PO = $!{gb.objSuffix})
#set($clear = "")
package $!{gb.packageName}.controller;


#foreach($cb in $tbb.colList)
#if($!{cb.propertyType}=="Clob"&&!$clob)
import java.sql.Clob;
#set($clob=true)
#elseif($!{cb.propertyType}=="Blob"&&!$blob)
import java.sql.Blob;
#set($blob=true)
#elseif($!{cb.propertyType}=="Date"&&!$d)
import java.util.Date;
#set($d=true)
#elseif($!{cb.propertyType}=="BigDecimal"&&!$bigDecimal)
import java.math.BigDecimal;
#set($bigDecimal=true)
#end
#end

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.ui.ModelMap;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;
import com.github.pagehelper.PageInfo;
import $!{gb.packageName}.dto.$!{tbb.className}Query;
import $!{gb.packageName}.pojo.$!{tbb.className}${PO};
import $!{gb.packageName}.service.$!{tbb.className}Service;
import $!{gb.packageName}.util.ISparams;
import $!{gb.packageName}.util.PublicUtil;

/**
 * @author $!{gb.userName}
 * @since $!{gb.nowDate}
 */

@Api(value = "/接口")
@RestController
@RequestMapping("/app/$!{tbb.objectName}/")
public class $!{tbb.className}Controller implements ISparams{
	
	private static final Log log = LogFactory.getLog($!{tbb.className}Controller.class);
	
	@Autowired
	private $!{tbb.className}Service $!{tbb.objectName}Service;
	
	

	/**
	 * 查看单个实例
	 * @param id
	 * @return
	 */
	@ApiOperation(value = "查看单个实例",
			notes = "")
	@RequestMapping(value="view/{id}",method=RequestMethod.POST)  
    public ModelMap view(@PathVariable("id") Long id) { 
		ModelMap map = new ModelMap();
		$!{tbb.className} $!{tbb.objectName} = $!{tbb.objectName}Service.selectByPrimaryKey(id);
		if($!{tbb.objectName}==null){
			throw new RuntimeException("找不到该实例，id为："+id);
		}
		map.put("data", $!{tbb.objectName});
        return PublicUtil.returnMap(map);  
    }  
	
	
	/**
	 * 新增对象
	 * @param poster
	 * @return
	 */
	@ApiOperation(value = "新增实例，对象保存",
			notes = "必填字段：classId,title,startTime,endTime")
	@RequestMapping(value="add",method=RequestMethod.POST)  
	public ModelMap add(@Valid @RequestBody $!{tbb.className} $!{tbb.objectName}, BindingResult result,HttpServletRequest request) {
		ModelMap map = new ModelMap();
		int i = $!{tbb.objectName}Service.insertSelective($!{tbb.objectName});
		if(i>0){
			map.put("flag", "新增成功");
		}else{
			map.put("flag", "新增失败");
		}
		map.put("data", $!{tbb.objectName});
		return PublicUtil.returnMap(map);   
	} 
	
	/**
	 * 删除实例
	 * @return
	 */
	@ApiOperation(value = "删除实例",
			notes = "")
	@RequestMapping(value="delete",method=RequestMethod.POST) 
	public ModelMap delete(@PathVariable("id")Long id, HttpServletRequest request) {
		ModelMap map = new ModelMap();
		int i = $!{tbb.objectName}Service.deleteByPrimaryKey(id);
		if(i>0){
			map.put("flag", "删除成功");
		}else{
			map.put("flag", "删除失败");
		}
		return PublicUtil.returnMap(map);   
	} 
	
	/**
	 * 修改实例
	 * @param $!{tbb.objectName}
	 * @param result
	 * @param request
	 * @return
	 */
	@ApiOperation(value = "修改实例",
			notes = "")
	@RequestMapping(value="update",method=RequestMethod.POST)  
	public ModelMap update(@Valid @RequestBody $!{tbb.className} $!{tbb.objectName}, BindingResult result,HttpServletRequest request) {
		ModelMap map = new ModelMap();
		int i = $!{tbb.objectName}Service.updateByPrimaryKeySelective($!{tbb.objectName});
		if(i>0){
			map.put("flag", "修改成功");
		}else{
			map.put("flag", "修改失败");
		}
		map.put("data", $!{tbb.objectName});
		return PublicUtil.returnMap(map);   
	} 
	
	@ApiOperation(value = "实例列表",
			notes = "")
	@RequestMapping(value="list",method=RequestMethod.POST)  
	public ModelMap list(@RequestBody(required=false) $!{tbb.className}Query query, BindingResult result,HttpServletRequest request) {
		ModelMap map = new ModelMap();
		PageInfo<$!{tbb.className}> data = $!{tbb.objectName}Service.selectListByPage(query);
		map.put(PAGE_QUERY, query);
		map.put(PAGE_LIST, data);
		return PublicUtil.returnMap(map);   
	} 
	
}
